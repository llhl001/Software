Maven 项目目录结构{  

	MavenWeb
		├─ pom.xml 
		├─ target   //存放运行生成的文件
		└─ src
			├─ test
			│	└─ java
			│		└─ 自定义包
			│
			│
			└─ main
				├─ webapp   
				├─ resources   //存放资源文件
				└─ java
					└─ 自定义包	
 
	                         
		注意：所有目录和文件不能缺，缺了会错
}


Maven 构建生命周期 {
    shell> mvn validate    验证：     验证项目是否正确且所有必须信息是可用的
    shell> mvn compile     编译：     源代码编译在此阶段完成
    shell> mvn test        测试：     使用适当的单元测试框架（例如JUnit）运行测试。
    shell> mvn package     打包：     创建JAR/WAR包如在 pom.xml 中定义提及的包
    shell> mvn verify      检查：     对集成测试的结果进行检查，以保证质量达标
    shell> mvn install     安装：     安装打包的项目到本地仓库，以供其他项目使用
    shell> mvn deploy      部署：     拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程
    
}

# 创建项目目录结构
    shell> mkdir NewProject && cd NewProject
    shell> mvn archetype:generate

# 生成 maven wrapper
    shell> mvn -N io.takari:maven:0.7.7:wrapper -Dmaven=3.5.4
    
# 常用 maven 命令
    shell> mvn clean            # 删除 target 目录
    shell> mvn compile          # 对该项目进行编译
    shell> mvn test             # 执行 MavenWeb/src/test/java 目录下 junit 的测试程序
    shell> mvn package          # 对项目进行打包，生成的文件在 target 目录下面，把该文件拷贝到 tomcat webapp 路径下即可运行
    shell> mvn install          # 安装打包好的当前项目的 jar 包到本地仓库中
    shell> mvn dependency:tree  # 该命令会打印一个当前项目的依赖树
    
# maven 命令进阶理解
    shell> mvn pluginPrefix:goalName            # 其中 pluginPrefix 和 groupID:artifactId 是一一对应的，可以用 coordinate 来替代 pluginPrefix
    shell> mvn -N io.takari:maven:0.7.7:wrapper -Dmaven=3.5.4       # 这里就是用坐标 io.takari:maven:0.7.7 替代了 pluginPrefix










