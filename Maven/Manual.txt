Maven 项目目录结构{  

	MavenWeb
		├─ pom.xml 
		├─ target   //存放运行生成的文件
		└─ src
			├─ test
			│	└─ java
			│		└─ 自定义包
			│
			│
			└─ main
				├─ webapp   
				├─ resources   //存放资源文件
				└─ java
					└─ 自定义包	
 
	                         
		注意：所有目录和文件不能缺，缺了会错
}

Maven 命令结构 {
    shell> mvn [options] [<goal(s)>] [<phase(s)>]
    shell> mvn archetype:generate                           # 运行插件中的 goal 
}




Maven 构建生命周期 {
    shell> mvn validate    验证：     验证项目是否正确且所有必须信息是可用的
    shell> mvn compile     编译：     源代码编译在此阶段完成
    shell> mvn test        测试：     使用适当的单元测试框架（例如JUnit）运行测试。
    shell> mvn package     打包：     创建JAR/WAR包如在 pom.xml 中定义提及的包
    shell> mvn verify      检查：     对集成测试的结果进行检查，以保证质量达标
    shell> mvn install     安装：     安装打包的项目到本地仓库，以供其他项目使用
    shell> mvn deploy      部署：     拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程
    
}

6 手工 Mavean 项目的搭建{	

	6.1 创建maven完整的目录结构
	6.2 在源代码目录下编写代码
	6.3 在 pom.xml 文件中配置项目的依赖包
	6.4 管理员权限 cmd，cd 进入写好的项目 MavenWeb 目录下
	6.5 执行 mvn compile 命令，对该项目进行编译
	6.6 执行 mvn test 命令，执行 MavenWeb/src/test/java 目录下 junit 的测试程序
	6.7 执行 mvn package 命令，会对项目进行打包，生成的文件在 target 目录下面，把该文件拷贝到 tomcat webapp 路径下即可运行
	6.8 执行 mvn clean 命令，删除 target 目录
	6.9 执行 mvn install 命令，安装项目打包好的 jar 包到本地仓库中
	mvn dependency:tree 该命令会打印一个当前项目的依赖树
	
	6.10 执行 mvn archetype:generate 命令，自定创建 Maven 目录骨架
		一步到位的创建骨架命令：mvn archetype:generate -DgroupId=com.kasei -DartifactId=MavenWeb -DarchetypeArtifactId=maven-archetype-webapp
}





