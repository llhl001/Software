:w                                  # 保存当前文件
:w fileName                         # 当前文件另存为 fileName，保存路径为当前路径
:wq                                 # 保存并关闭当前文件，更新文件最后修改时间属性
:q!                                 # 不保存，并退出 vim
:x                                  # 如果修改过则保存并关闭，否则直接关闭，不更新文件最后修改时间属性
:e fileName                         # 打开一个文件
:e ++enc=utf-8 myfile.txt           # 以指定编码格式打开文件
:new                                # 新建一个文件
:h                                  # 打开 vim 帮助文件
:help new                           # 查看 new 的帮助 
 
:set number                         # 临时显示行号
:67                                 # 光标移动到 67 行       

:reg                                # 查看所有寄存器中的值
:reg ""                             # 查看 "" 寄存器的值
    
:shell                              # 不退出 vim 执行 shell 命令
:exit                               # 执行完 shell 命令回到 vim

:nohl                               # 取消搜索后的高亮显示

# 查找替换命令中，正则表达式修饰符含义
    g           # 全不匹配，如果没有，只匹配第一个
    i           # 忽略大小写
    c           # 每一个替换前都询问
# 查找替换命令中的各种符号的含义
    0(number)   # 表示文件第 n 行
    $           # 表示文件最后一行
    .           # 表示当前光标所在行
    'm          # 表示标记 m 所在的行
    '<          # 表示选择区的第一行
    '>          # 表示选择区的最后一行
    %           # 表示整个文本（相当于 1,$)
:/?abc*h                            # 查找字符串 "?abc*h"
:s/str1/str2                        # 表示将当前行第一个 str1 替换成 str2
:s/str1/str2/g                      # 表示将当前行所有 str1 替换成 str2
:%s/s1/s2                           # 表示将当前文件中每一行的第一个 str1 替换成 str2
:%s/s1/s2/g                         # 表示将当前文件中所有 str1 替换成 str2
:9,$s/old/new/g                     # 从第9行到最后一行
:.,$s/old/new/g                     # 从当前行到最后一行
:1,$s/old/new/g                     # 从第一行到最后一行每一行的第一个   
:'<,'>s/old/new/g                   # 在选中区域替换文本
:s+vivian/+sky/                     # 把分隔符从 / 替换为 + 这样 / 就能被识别出来

:set paste                          # 原样粘贴，不自动缩进
:set nopaste                        # 重新开启缩进

:marks                              # 查看书签列表
:marks a                            # 查看 a 书签的信息


# 范围参数命令
:d                      
    d<范围>       // 删除一定范围内的文本
    y<范围>
    v<范围>
    =<范围>
    gU<范围>
    gu<范围>
    ><范围>
    <<范围>
Vim 范围参数
    Space  ：光标所在位置字符
    重复某些动作命令  ：光标所在行，如 dd yy == >>
    $ : 从光标起始位置到行尾
    ^ : 从光标起始位置到行首，不包含缩进空白
    0 ：从光标起始位置到行首，包含缩进空白
    gg : 从光标位置到文件头
    G ：从光标位置到文件尾
    % ：从光标位置到另一边的匹配括号
    t<字符> ：从光标位置到右边首次出现该字符的位置，包括该字符
    f<字符> ：从光标位置到右边首次出现该字符的位置，包括该字符
    F<字符> ： 
    /正则表达式 ：从光标位置到下一个正则表达式匹配的字符串
    ?正则表达式 ：从光标位置到下一个正则表达式匹配的字符串
        
    aw - 一个单词加一个空格 （a可理解为“一个”，下同） 
    iw - 一个单词 （i可理解为in，下同） 
    a" - 一个字符串包括双引号 
    i" - 一个字符串内部文本 
    a< - 一组< >包含的文本，包括< >号本身 
    同理类推： i<, a[, i[, a(, i(   


:set guifont=*                          # 查看 gvim 支持的所有字体





