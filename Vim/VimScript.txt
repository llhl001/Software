######################################################### Frequently Used
execute "echo 'Hello World!'"   # 执行一个命令
normal! /foo<CR>                # 忽略所有用户定义的键映射，normal! 不会解析 <CR> 那样的特殊字符序列，<CR> 不会被解析为回车键，解析为普通的字符串   
execute "normal! mqA;\<esc>`q"  # execute 中可以使用 \<ESC> 来打出键盘 ESC 按键的效果


######################################################### Syntax 
# Variable
let var1 = "string"
let var2 = -123
let var3 = -123.45
let list1 = ["string", -123, -123.45, ['1', '2']]
let [var1, var2] = mylist                   " list 解构，参考 ES6 解构函数
let dictionary = {'key1':'val1', 'key2':-123.4, 'key3':[], 'key4':{} }

# Flow Controll
for item in list
    ...
endfor


while
    ...
endwhile

# Function
let Fn = function("MyFunc")                # VimScript 方法首字母必须大写
echo Fn()

# keyword = range | abort
function MyFunc(param1, param2, ...) keyword
    let var1 = a:param1             # 参数引用
    let var1 = a:0                  # 表示方法所有参数的个数
    let var2 = a:{2}                # 等价于 a:param2 ，表示方法的 第二个参数
    let var3 = g:externalVar        # g:var 表示全局变量
    let var4 = s:var3               # s:var 表示局部变量
    let var4 = b:var3               # b:var 表示缓冲区的局部变量
    let var4 = w:var3               # w:var 表示窗口的局部变量
    let var4 = v:var3               # v:var 表示 Vim 预定义的变量
    
    
    # 函数调用
    let res = Func(param)
    range call Func(param)
    
    echom "Hello again, world!"               # echom 输出的内容可以之后使用 :messages 再次查看
endfunction
call MyFunc()


########## Expression 
$NMAE	环境变量
&name	选项
@r	寄存器


